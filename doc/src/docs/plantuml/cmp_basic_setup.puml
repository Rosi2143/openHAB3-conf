@startuml basic_setup
legend top left
    |Color| Type |
    |<#LightGreen> LightGreen | Tinkerforge HW|
    |<#Green> Green | bricklet or brick|
    |<#Olive> Olive | activity on tinkerforge|

    |<#Pink> Pink | RaspberryPi HW|
    |<#Red> Red | Process on RaspberryPi|
    |<#Orchid> Orchid | activity on RaspberryPi|
    |<#Purple> Purple | group changes on RaspberryPi|
    |<#LightCoral> LightCoral | scripty run on RaspberryPi|

    |<#Aqua> Aqua | homematic-raspi HW|
    |<#SpringGreen> SpringGreen | activity on homematic-raspi HW|

    |<#LightYellow> LightYellow | cloud / mobile device|
    |<#Yellow> Yellow | App running on mobile device|

    |<#LightBlue> LightBlue | MQTT|
    |<#Blue> Blue | App running on MQTT|
endlegend

package tinkerforge #LightCyan {
  node "Tinkerforge" #LightGreen {
    component brick #Green {
    }
    component io16 #Green {
    }
    component out4 #Green {
    }

    port USB as usb
    interface brickd #Green

    brick - brickd
    brick - usb

    brick --> io16
    brick --> out4
  }
  node bricklet_io16{
  }
  node bricklet_out4{
  }

  bricklet_io16 --> usb
  bricklet_out4 --> usb
}

node raspi #Pink {
  component habapp #Red {
  }
  component OH3 as oh #Red {
  }
  component grafana #Red {
  }

  interface OH_Rest_API as oh_rest #Red
  oh -up- oh_rest

  habapp ..> oh_rest : use
  grafana ..> oh_rest : use
}

package MQTT {
  node volumio #LightBlue {
    component zigbee2mqtt #Blue {
    }
    component mosquitto #Blue {
    }

    port zigbee #Blue
    interface MQTT as mqtt #Blue

    mosquitto -left- mqtt
    zigbee2mqtt - zigbee
    zigbee2mqtt ..> mqtt
  }
  node IKEA_lamp{
  }
  node IKEA_motion_detect{
  }
  node IKEA_remote{
  }

  IKEA_lamp --> zigbee
  IKEA_motion_detect --> zigbee
  IKEA_remote --> zigbee
}

package homematic_ip {
  node homematic-raspi #Aqua{
    component CCU3 #SpringGreen{
    }
    interface homematic #SpringGreen
    port "RPI-RF-MOD" as rf

    CCU3 - homematic
    CCU3 - rf
  }
  node hmip_blind {
  }
  node hmip_door_window {
  }
  node hmip_lock {
  }
  node hmip_motion_detect {
  }
  node hmip_mp3 {
  }
  node hmip_ring_detect {
  }
  node hmip_thermostat {
  }

  hmip_blind --> rf
  hmip_door_window --> rf
  hmip_lock --> rf
  hmip_motion_detect --> rf
  hmip_mp3 --> rf
  hmip_ring_detect --> rf
  hmip_thermostat --> rf
}

package cloud {
  node "Google Assistent" #LightYellow {
    component googleassistent as google #Yellow
  }
  node "Alexa" #LightYellow {
    component alexa #Yellow
  }
  node "Philips Hue" #LightYellow {
    component HueApp as hueApp #Yellow
  }
  node "Mobile" #LightYellow {
    component HabPanel as habpanel #Yellow
    component App as app #Yellow
  }
  cloud myOpenhab #sienna {
    component myopenhab #brown

    interface myOH_Rest_API as myOH_Rest #brown

    myopenhab -up- myOH_Rest
  }
}

package hue {
  node "Hue" #gold{
    component HueBridge as hueBridge #orange

    interface HueRest #orange

    port zigbeeHue

    hueBridge -left- HueRest
    hueBridge - zigbeeHue

    hueApp ..> HueRest : use
  }
  package zigbee_hue {
      node hue_light {
      }
      node hue_motion_sensor {
      }
      node hue_plug {
      }
      hue_light --> zigbeeHue
      hue_motion_sensor --> zigbeeHue
      hue_plug --> zigbeeHue
  }

  package zigbee_osram {
      node osram_light {
      }
      node osram_plug {
      }
      osram_light --> zigbeeHue
      osram_plug --> zigbeeHue
  }

  package zigbee_paulmann {
      node paulmann_light {
      }
      paulmann_light --> zigbeeHue
  }
}

habapp ..> mqtt : use
habapp ..> brickd : use
myopenhab ..> oh_rest : use
hueBridge ..> oh_rest : use
habpanel ..> oh_rest : use

google ..> myOH_Rest : use
google ..> HueRest : use
alexa ..> myOH_Rest : use
habpanel ..> myOH_Rest : use
app ..> myOH_Rest : use

oh ..> homematic : use
oh ..> HueRest : use
@enduml
